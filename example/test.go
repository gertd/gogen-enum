// [./test.go] -- generated by gogen-enum from source: [./test.yaml]
// !! DO NOT EDIT !!
//
package example

import (
	"bytes"
	"encoding/json"
)

// Architecture -- enum
type Architecture int

// Architecture -- enum constants
const (
	ArchitectureUnknown Architecture = 0 + iota
	ArchitectureX86
	ArchitectureX64
	ArchitectureARM
	ArchitecturePPC
)

// ArchitectureID -- map enum constant to string
var architectureID = map[Architecture]string{
	ArchitectureUnknown: "unknown",
	ArchitectureX86:     "x86",
	ArchitectureX64:     "x64",
	ArchitectureARM:     "arm",
	ArchitecturePPC:     "ppc",
}

// ArchitectureName -- map string to enum constant
var architectureName = map[string]Architecture{
	"unknown": ArchitectureUnknown,
	"x86":     ArchitectureX86,
	"x64":     ArchitectureX64,
	"arm":     ArchitectureARM,
	"ppc":     ArchitecturePPC,
}

// String -- Architecture
func (t Architecture) String() string { return architectureID[t] }

// MarshalJSON -- Architecture
func (t *Architecture) MarshalJSON() ([]byte, error) {

	buffer := bytes.NewBufferString("\"")
	buffer.WriteString(architectureID[*t])
	buffer.WriteString("\"")
	return buffer.Bytes(), nil
}

// UnmarshalJSON -- Architecture
func (t *Architecture) UnmarshalJSON(b []byte) (err error) {

	var s string
	err = json.Unmarshal(b, &s)
	if err != nil {
		return err
	}
	*t = architectureName[s]
	return nil
}

// PackageManager -- enum
type PackageManager uint32

// PackageManager -- enum constants
const (
	PackageManagerUnknown PackageManager = 0 + iota
	PackageManagerDpkg
	PackageManagerApk
	PackageManagerApt
	PackageManagerYum
	PackageManagerZypper
	PackageManagerBrew
	PackageManagerChocolatey
	PackageManagerMsi
)

// PackageManagerID -- map enum constant to string
var packageManagerID = map[PackageManager]string{
	PackageManagerUnknown:    "unknown",
	PackageManagerDpkg:       "dpkg",
	PackageManagerApk:        "apk",
	PackageManagerApt:        "apt",
	PackageManagerYum:        "yum",
	PackageManagerZypper:     "zypper",
	PackageManagerBrew:       "brew",
	PackageManagerChocolatey: "chocolatey",
	PackageManagerMsi:        "msi",
}

// PackageManagerName -- map string to enum constant
var packageManagerName = map[string]PackageManager{
	"unknown":    PackageManagerUnknown,
	"dpkg":       PackageManagerDpkg,
	"apk":        PackageManagerApk,
	"apt":        PackageManagerApt,
	"yum":        PackageManagerYum,
	"zypper":     PackageManagerZypper,
	"brew":       PackageManagerBrew,
	"chocolatey": PackageManagerChocolatey,
	"msi":        PackageManagerMsi,
}

// String -- PackageManager
func (t PackageManager) String() string { return packageManagerID[t] }

// MarshalJSON -- PackageManager
func (t *PackageManager) MarshalJSON() ([]byte, error) {

	buffer := bytes.NewBufferString("\"")
	buffer.WriteString(packageManagerID[*t])
	buffer.WriteString("\"")
	return buffer.Bytes(), nil
}

// UnmarshalJSON -- PackageManager
func (t *PackageManager) UnmarshalJSON(b []byte) (err error) {

	var s string
	err = json.Unmarshal(b, &s)
	if err != nil {
		return err
	}
	*t = packageManagerName[s]
	return nil
}
